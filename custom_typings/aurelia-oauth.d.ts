// Generated by typings
// Source: dist/dts/url-hash-service.d.ts
declare module '~aurelia-oauth/url-hash-service' {
export default class UrlHashService {
    getHash: () => string;
    getHashData: () => any;
    clearHash: () => void;
    private decodeUrlData;
}
}
declare module 'aurelia-oauth/url-hash-service' {
export * from '~aurelia-oauth/url-hash-service';
export { default } from '~aurelia-oauth/url-hash-service';
}

// Generated by typings
// Source: dist/dts/local-storage-service.d.ts
declare module '~aurelia-oauth/local-storage-service' {
export default class LocalStorageService {
    isStorageSupported(): boolean;
    set<T>(key: string, object: T): void;
    get<T>(key: string): T;
    remove(key: string): void;
}
}
declare module 'aurelia-oauth/local-storage-service' {
export * from '~aurelia-oauth/local-storage-service';
export { default } from '~aurelia-oauth/local-storage-service';
}

// Generated by typings
// Source: dist/dts/oauth-service.d.ts
declare module '~aurelia-oauth/oauth-service' {
import { EventAggregator } from 'aurelia-event-aggregator';
import { OAuthTokenService } from '~aurelia-oauth/oauth-token-service';
import UrlHashService from '~aurelia-oauth/url-hash-service';
import LocalStorageService from '~aurelia-oauth/local-storage-service';
export interface OAuthConfig {
    loginUrl: string;
    logoutUrl: string;
    clientId: string;
    logoutRedirectParameterName?: string;
    scope?: string;
    state?: string;
    redirectUri?: string;
    alwaysRequireLogin?: boolean;
}
export class OAuthService {
    private oAuthTokenService;
    private urlHashService;
    private localStorageService;
    private eventAggregator;
    config: OAuthConfig;
    private defaults;
    static readonly LOGIN_SUCCESS_EVENT: string;
    static readonly INVALID_TOKEN_EVENT: string;
    constructor(oAuthTokenService: OAuthTokenService, urlHashService: UrlHashService, localStorageService: LocalStorageService, eventAggregator: EventAggregator);
    configure: (config: OAuthConfig) => OAuthConfig;
    isAuthenticated: () => boolean;
    login: () => void;
    logout: () => void;
    loginOnStateChange: (toState: any) => boolean;
    setTokenOnRedirect: () => void;
    private isLoginRequired;
    private getTokenDataFromUrl;
    private getBaseRouteUrl;
    private getSimpleNonceValue;
}
}
declare module 'aurelia-oauth/oauth-service' {
export * from '~aurelia-oauth/oauth-service';
}

// Generated by typings
// Source: dist/dts/jwt-token-service.d.ts
declare module '~aurelia-oauth/jwt-token-service' {
export interface JwtClaims {
    exp: number;
    nbf?: number;
    iat?: number;
    ppid?: string;
    given_name?: string;
}
export default class JwtTokenService {
    getJwtClaims: (encodedToken: string) => JwtClaims;
    private createJwtToken;
    private decodeBase64String;
}
}
declare module 'aurelia-oauth/jwt-token-service' {
export * from '~aurelia-oauth/jwt-token-service';
export { default } from '~aurelia-oauth/jwt-token-service';
}

// Generated by typings
// Source: dist/dts/oauth-token-service.d.ts
declare module '~aurelia-oauth/oauth-token-service' {
import JwtTokenService, { JwtClaims } from '~aurelia-oauth/jwt-token-service';
export interface OAuthTokenConfig {
    name: string;
    urlTokenParameters?: {
        idToken: string;
        tokenType?: string;
    };
    expireOffsetSeconds?: number;
}
export interface OAuthTokenData {
    token: string;
    tokenType: string;
    expiresAt: number;
    jwtClaims?: JwtClaims;
}
export class OAuthTokenService {
    private jwtTokenService;
    config: OAuthTokenConfig;
    private tokenData;
    constructor(jwtTokenService: JwtTokenService);
    configure: (config: OAuthTokenConfig) => OAuthTokenConfig;
    createToken: (urlTokenData: any) => OAuthTokenData;
    setToken: (data: OAuthTokenData) => OAuthTokenData;
    getToken: () => OAuthTokenData;
    getIdToken: () => string;
    getAuthorizationHeader: () => string;
    getTokenType: () => string;
    removeToken: () => OAuthTokenData;
    isTokenValid: () => boolean;
    private getTimeNow;
}
}
declare module 'aurelia-oauth/oauth-token-service' {
export * from '~aurelia-oauth/oauth-token-service';
}

// Generated by typings
// Source: dist/dts/oauth-interceptor.d.ts
declare module '~aurelia-oauth/oauth-interceptor' {
import { EventAggregator } from 'aurelia-event-aggregator';
import { OAuthTokenService } from '~aurelia-oauth/oauth-token-service';
export default class OAuthInterceptor {
    private oauthTokenService;
    private eventAggregator;
    constructor(oauthTokenService: OAuthTokenService, eventAggregator: EventAggregator);
    request: (config: any) => any;
    responseError: (response: any) => any;
}
}
declare module 'aurelia-oauth/oauth-interceptor' {
export * from '~aurelia-oauth/oauth-interceptor';
export { default } from '~aurelia-oauth/oauth-interceptor';
}

// Generated by typings
// Source: dist/dts/aurelia-oauth.d.ts
declare module '~aurelia-oauth/aurelia-oauth' {
import { FrameworkConfiguration } from 'aurelia-framework';
import { OAuthService } from '~aurelia-oauth/oauth-service';
import { OAuthTokenService } from '~aurelia-oauth/oauth-token-service';
import OAuthInterceptor from '~aurelia-oauth/oauth-interceptor';
export function configure(framework: FrameworkConfiguration, config: (oauthService: OAuthService, oauthTokenService: OAuthTokenService, configureClient: (client: any) => void) => void): void;
export { OAuthService, OAuthTokenService, OAuthInterceptor };
}
declare module 'aurelia-oauth/aurelia-oauth' {
export * from '~aurelia-oauth/aurelia-oauth';
}
declare module 'aurelia-oauth' {
export * from '~aurelia-oauth/aurelia-oauth';
}
